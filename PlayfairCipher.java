/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package classic.encription;

/**
 *
 * @author Admin
 */
public class PlayfairCipher extends javax.swing.JFrame {

    /**
     * Creates new form PlayfairCipher
     */
    public PlayfairCipher() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textEn = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textDe = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        keyEn = new javax.swing.JTextField();
        keyDe = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        textGenEn = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        textGenDe = new javax.swing.JTextArea();
        btnGenEn = new javax.swing.JButton();
        btnEn = new javax.swing.JButton();
        btnDe = new javax.swing.JButton();
        btnGenDe = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Playfair Cipher");

        textEn.setColumns(20);
        textEn.setRows(5);
        jScrollPane1.setViewportView(textEn);

        textDe.setColumns(20);
        textDe.setRows(5);
        jScrollPane2.setViewportView(textDe);

        jLabel1.setText("Key");

        jLabel2.setText("Key");

        textGenEn.setColumns(20);
        textGenEn.setRows(5);
        jScrollPane3.setViewportView(textGenEn);

        textGenDe.setColumns(20);
        textGenDe.setRows(5);
        jScrollPane4.setViewportView(textGenDe);

        btnGenEn.setText("Generate Key");
        btnGenEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenEnActionPerformed(evt);
            }
        });

        btnEn.setText("Encryption");
        btnEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnActionPerformed(evt);
            }
        });

        btnDe.setText("Decryption");
        btnDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeActionPerformed(evt);
            }
        });

        btnGenDe.setText("Generate Key");
        btnGenDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenDeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(keyEn))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(5, 5, 5)
                                    .addComponent(keyDe, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(jScrollPane4)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnGenDe)
                                .addGap(18, 18, 18)
                                .addComponent(btnDe))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnGenEn)
                                .addGap(18, 18, 18)
                                .addComponent(btnEn)))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(keyEn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGenEn)
                            .addComponent(btnEn))
                        .addGap(1, 1, 1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnDe)
                                .addComponent(btnGenDe))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(keyDe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnActionPerformed
        String text = textEn.getText();
        String key = keyEn.getText();
        textDe.setText(encrypt(text, key));
    }//GEN-LAST:event_btnEnActionPerformed

    private void btnGenEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenEnActionPerformed
        String key = keyEn.getText();
        textGenEn.setText(generateKey(key));
    }//GEN-LAST:event_btnGenEnActionPerformed

    private void btnGenDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenDeActionPerformed
        String key = keyDe.getText();
        textGenDe.setText(generateKey(key));
    }//GEN-LAST:event_btnGenDeActionPerformed

    private void btnDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeActionPerformed
        String text = textDe.getText();
        String key = keyDe.getText();
        textEn.setText(decrypt(text, key));
    }//GEN-LAST:event_btnDeActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayfairCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayfairCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayfairCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayfairCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayfairCipher().setVisible(true);
            }
        });
    }
    
    private static char[][] keyMatrix = new char[5][5];
    private static void createKeyMatrix(String key) {
        boolean[] usedChars = new boolean[26];
        key = key.toUpperCase().replaceAll("[J]", "I");
        int k = 0;

        // Thêm các ký tự từ khóa vào ma trận
        for (int i = 0; i < key.length(); i++) {
            char ch = key.charAt(i);
            if (!usedChars[ch - 'A']) {
                keyMatrix[k / 5][k % 5] = ch;
                usedChars[ch - 'A'] = true;
                k++;
            }
        }

        // Thêm các ký tự còn lại
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            if (ch != 'J' && !usedChars[ch - 'A']) {
                keyMatrix[k / 5][k % 5] = ch;
                k++;
            }
        }
    }
    
    private static String generateKey(String key){
        StringBuilder result = new StringBuilder();
        createKeyMatrix(key);
        for (int i = 0; i < 5; i++){
            for (int j = 0; j < 5; j++){
                result.append(keyMatrix[i][j]);
            }
        }
        return result.toString();
    }

    // Hàm tìm vị trí của một ký tự trong ma trận khóa
    private static int[] findPosition(char ch) {
        int[] pos = new int[2];
        if (ch == 'J') ch = 'I'; // Thay thế J bằng I
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                if (keyMatrix[i][j] == ch) {
                    pos[0] = i;
                    pos[1] = j;
                    return pos;
                }
            }
        }
        return null;
    }

    // Hàm để mã hóa một cặp ký tự
    private static String encodePair(char a, char b) {
        int[] posA = findPosition(a);
        int[] posB = findPosition(b);

        if (posA[0] == posB[0]) { // Cùng hàng
            return "" + keyMatrix[posA[0]][(posA[1] + 1) % 5] + keyMatrix[posB[0]][(posB[1] + 1) % 5];
        } else if (posA[1] == posB[1]) { // Cùng cột
            return "" + keyMatrix[(posA[0] + 1) % 5][posA[1]] + keyMatrix[(posB[0] + 1) % 5][posB[1]];
        } else { // Tạo hình chữ nhật
            return "" + keyMatrix[posA[0]][posB[1]] + keyMatrix[posB[0]][posA[1]];
        }
    }

    // Hàm để mã hóa toàn bộ văn bản
    public static String encrypt(String plaintext, String key) {
        createKeyMatrix(key);
        plaintext = plaintext.toUpperCase().replaceAll("[J]", "I").replaceAll("[^A-Z]", "");

        // Xử lý chuỗi văn bản
        StringBuilder processedText = new StringBuilder();
        for (int i = 0; i < plaintext.length(); i += 2) {
            char first = plaintext.charAt(i);
            char second = (i + 1 < plaintext.length()) ? plaintext.charAt(i + 1) : 'X';

            if (first == second) {
                processedText.append(first).append('X');
                i--;
            } else {
                processedText.append(first).append(second);
            }
        }

        StringBuilder ciphertext = new StringBuilder();
        for (int i = 0; i < processedText.length(); i += 2) {
            ciphertext.append(encodePair(processedText.charAt(i), processedText.charAt(i + 1)));
        }

        return ciphertext.toString();
    }

    // Hàm để giải mã một cặp ký tự
    private static String decodePair(char a, char b) {
        int[] posA = findPosition(a);
        int[] posB = findPosition(b);

        if (posA[0] == posB[0]) { // Cùng hàng
            return "" + keyMatrix[posA[0]][(posA[1] + 4) % 5] + keyMatrix[posB[0]][(posB[1] + 4) % 5];
        } else if (posA[1] == posB[1]) { // Cùng cột
            return "" + keyMatrix[(posA[0] + 4) % 5][posA[1]] + keyMatrix[(posB[0] + 4) % 5][posB[1]];
        } else { // Tạo hình chữ nhật
            return "" + keyMatrix[posA[0]][posB[1]] + keyMatrix[posB[0]][posA[1]];
        }
    }

    // Hàm để giải mã toàn bộ văn bản
    public static String decrypt(String ciphertext, String key) {
        createKeyMatrix(key);
        ciphertext = ciphertext.toUpperCase().replaceAll("[J]", "I").replaceAll("[^A-Z]", "");

        StringBuilder plaintext = new StringBuilder();
        for (int i = 0; i < ciphertext.length(); i += 2) {
            plaintext.append(decodePair(ciphertext.charAt(i), ciphertext.charAt(i + 1)));
        }

        return plaintext.toString();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDe;
    private javax.swing.JButton btnEn;
    private javax.swing.JButton btnGenDe;
    private javax.swing.JButton btnGenEn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField keyDe;
    private javax.swing.JTextField keyEn;
    private javax.swing.JTextArea textDe;
    private javax.swing.JTextArea textEn;
    private javax.swing.JTextArea textGenDe;
    private javax.swing.JTextArea textGenEn;
    // End of variables declaration//GEN-END:variables
}
